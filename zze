#include<stdlib.h>
#include<stdio.h>
#define LENGTH 1024
int lsearch(int seek[],int len,int key){
    int i=0;
    for(i=0;i<len;i++){
        if(seek[i]==key){
            return 1;
        }
    }
    return 0;
}
int main(){
    FILE *fin;
    FILE *fout;
    int record_path[LENGTH];
    int updated_path[LENGTH];
    int updated_dots[LENGTH];
    int all_updated_path[LENGTH][100];
    int black_dots[LENGTH];
    int updated_list[LENGTH];
    int number_of_dots=0;
    int cnt=0; //紀錄更新點計數器
    int cnt1=0; //記錄黑點計數器
    int cnt2=0; //紀錄更新路徑次數
    fin=fopen("./input.txt","r");
    fout=fopen("./output.txt","w");

    //讀取dots數量
    fscanf(fin,"%d", &number_of_dots);

    //讀取record路徑
    for(int i=0;i<number_of_dots;i++){
        fscanf(fin,"%d",&record_path[i]);
        all_updated_path[cnt2][i]=record_path[i];
    }

    //讀取原更新路徑進輸出路徑
    cnt2++;

    //讀取updated路徑
    for(int i=0;i<number_of_dots;i++){
        fscanf(fin,"%d",&updated_path[i]); 
    }

    //讀取已更新點
    for(int i=0;i<number_of_dots-1;i++){
        if(record_path[i] == -1){
            //紅點
            updated_dots[cnt++]=i;
            //printf("%d ",updated_dots[cnt]);
        }
        if(updated_path[i] == -1){
            black_dots[cnt1++]=i;
            //printf("%d ",black_dots[cnt1]);
        }
    }

    //複製上一路徑
    for(int i=0;i<number_of_dots;i++){
        all_updated_path[cnt2][i]=all_updated_path[cnt2-1][i];
    }
    //更新紅點
    for(int i=0;i<cnt;i++){
        all_updated_path[cnt2][updated_dots[i]]=updated_path[updated_dots[i]];
    }
    cnt2++; //此時cnt2=2
    //再複製一次
    for(int i=0;i<number_of_dots;i++){
        all_updated_path[cnt2][i]=all_updated_path[cnt2-1][i];
    }
    /*for(int i=0;i<number_of_dots;i++){
        printf("%d ",all_updated_path[cnt2][i]);
    }*/   
    //合併出新的路徑
    while(1){
        int merged_point[LENGTH];
        int merged_path[LENGTH];
        int distance[LENGTH];
        int counter=0; //紅黑暫時合併用計數器
        int counter1=0; //合併後路徑
        int counter2=0; //預定更新路徑計數器
        int record_point=0;
        int merged_length=0;
        int data=0;
        int dis=0;
        //將黑點加入到新的陣列中
        int combined[LENGTH];
        for(int i=0;i<cnt;i++){
            combined[counter++]=updated_dots[i];
        }
        for(int i=0;i<cnt1;i++){
            combined[counter++]=black_dots[i];
        }
        //合併新路徑
        while(record_point!=-1){
            if(!lsearch(combined,counter,record_point)){
                merged_point[merged_length++] = record_point;
                //更新出的新路徑
            }
            record_point = all_updated_path[cnt2][record_point];
            //printf("%d ",merged_length);
        }
        //printf("%d ",record_point);
        //for(int i=0;i<merged_length;i++){
        //    printf("%d ", merged_point[i]);
        //}
        //將路徑存入陣列
        for(int i=0;i<merged_length;i++){
            record_point = merged_point[i];
            data = updated_path[record_point];
            //當更新點在陣列裡被找到
            while(lsearch(combined,counter,data)){
                data = updated_path[data];
                record_point=data;
            }
            if(data==number_of_dots-1){
                merged_path[counter1++]=data;
            }
            else{
                merged_path[counter1++]=data;
            }
        }
        //for(int i=0;i<merged_length;i++){
        //      printf("%d ", merged_path[i]);
        //}
        for(int i=0;i<merged_length;i++){
            record_point = merged_path[i];
            if(merged_path[i]==-1){
                distance[i]=0;
            }   
            else{
                for(int j=0;j<merged_length;j++){
                    if(merged_point[j]==record_point){
                        data=j;
                    }
                }
                dis=data-i;
                distance[i]=dis;
            }
        }
        //for(int i=0;i<merged_length;i++){
        //    printf("%d ",distance[i]);
        //}
        //如果merge長度為1就break
        if(merged_length==1){
            break;
        }
        int index=0;
        int head=0;
        //odd event
        while(1){    
            int max_value=-10;
            for(int i=head;i<merged_length;i++){
                dis=distance[i];
                if(dis>max_value){
                    index=i;
                    max_value=dis;
                }
            }
            //將最大值存進待更新陣列
            if(max_value!=0 && max_value!= -10){
                updated_list[counter2++]= index;
                //從起點加上最大距離即跳到下一個點
                head= index + max_value;
            }
            else{
                break;
            }
        }
        //奇數輪中空隙更新
        for(int i=0;i<merged_length-1;i++){
            int flag=1;
            if(distance[i]<1){
                continue;
            }
            if(!lsearch(updated_list,counter2,i)){
                for(int j=0;j<counter2;j++){
                    if(!((i+distance[i])<=(updated_list[j]))){
                        if(!(i>=(updated_list[j]+distance[updated_list[j]]))){
                            flag=0;
                        }
                    }
                }
                if(flag==1){
                    updated_list[counter2++]=i;
                }
            }
        }
        //更新奇數輪點
        if(counter2>0){
            for(int i=0;i<counter2;i++){
                int index1=updated_list[i];
                all_updated_path[cnt2][index1]=updated_path[index1];
                updated_dots[cnt++]=index1;
            }
            cnt2++;
            for(int i=0;i<number_of_dots;i++){
                all_updated_path[cnt2][i]=all_updated_path[cnt2-1][i];
            }
        }
        //偶數輪
        int flag1=1;
        for(int i=0;i<counter2;i++){
            int index1=updated_list[i];
            if(distance[index1]<=1){
                flag1=0;
                break;
            }
            for(int j=0;j<distance[index1]-1;j++){
                index1++;
                all_updated_path[cnt2][index1]=updated_path[index1];
                updated_dots[cnt++]=index1;
            }

        }
        if(flag1==1){
            cnt2++;
            for(int i=0;i<number_of_dots;i++){
                all_updated_path[cnt2][i]=all_updated_path[cnt2-1][i];
            }
        }
    }
    if(cnt1>0){
        for(int i=0;i<cnt1;i++){
            all_updated_path[cnt2][black_dots[i]]=-1;
        }
    }
    //print
    fprintf(fout , "%d\n" , cnt2);
    for(int i=0;i<cnt2;i++){
        for(int j=0;j<number_of_dots;j++){
            fprintf(fout , "%d " , all_updated_path[i][j]);
        }
        fprintf(fout , "\n");
    }
    return 0;
}
